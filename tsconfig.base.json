{
  "compilerOptions": {
    /* 基本选项 */
    // ↓指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext" (最新版本)。
    "target": "ESNext",
    // ↓编译过程中需要引入的库文件的列表。
    "lib": [
      "ESNext",
      "DOM",
      "DOM.Iterable"
      // "WebWorker"
    ],
    // ↓指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。
    "module": "ESNext",
    // ↓是否允许 javascript 文件
    "allowJs": true,
    // ↓报告 javascript 文件中的错误
    "checkJs": true,
    // ↓"preserve" 在 .tsx文件里支持JSX ; 设置为"react"以支持 React JSX 语法
    "jsx": "preserve",
    // ↓指定项目编译文件的根目录(输入文件夹)
    "rootDir": ".",
    // ↓决定是否启用从 tslib 库引入语法降级辅助函数,以辅助处理某些功能，如装饰器和 async/await
    "importHelpers": true,
    // ↓忽略所有的声明文件（ *.d.ts）的类型检查，提高编译速度。
    "skipLibCheck": true,
    // ↓将每个文件作为单独模块
    "isolatedModules": true,
    /* 严格的类型检查选项 */
    // ↓是否启用所有严格类型检查选项。相当于启用
    // noImplicitAny, noImplicitThis, alwaysStrict， strictNullChecks和 strictFunctionTypes和strictPropertyInitialization
    "strict": true,
    // ↓是否在表达式和声明上有隐含的 any 类型时报错
    "noImplicitAny": true,
    "noImplicitThis": true, // 当 this 表达式值为 any 类型的时候，生成一个错误
    "alwaysStrict": true, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
    // ↓启用严格的 null 检查。 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictPropertyInitialization": true,
    "strictBindCallApply": true,
    /* 额外的检查 */
    // ↓是否在有未使用的局部变量抛错。
    "noUnusedLocals": true,
    // ↓是否在有声明了但未使用的函数参数时报告错误。
    "noUnusedParameters": true,
    // ↓是否在函数缺少返回语句时报告错误
    "noImplicitReturns": true,
    // ↓用于检查 switch 中是否有 case 没有使用 break 跳出 switch
    "noFallthroughCasesInSwitch": true,
    // ↓检查 import xxx from 'fileName' 语句的文件名和实际文件名是否一致
    "forceConsistentCasingInFileNames": true,
    /* 模块解析选项 */
    // ↓指定了 TypeScript 解析模块导入的方式
    "moduleResolution": "Node",
    // ↓解析非相对模块名的基准目录。
    "baseUrl": ".",
    // ↓模块名到基于 baseUrl 的路径映射的列表
    "paths": {
      "@packages/*": ["packages/*"]
    },
    // ↓要包含的类型声明文件路径列表。
    "typeRoots": ["./node_modules/@types/", "./types"],
    // ↓与 esModuleInterop: true 配合允许从 commonjs 的依赖中直接按 import XX from 'xxx' 的方式导出 default 模块
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "esModuleInterop": true, // 支持合成模块的默认导入
    // 允许引入 .json 模块
    "resolveJsonModule": true,
    /* 编译输出选项 */
    // ↓是否生成编译后的 js 文件
    "noEmit": true, // 只进行类型检查而不需要实际编译运行代码
    // ↓是否生成编译后的 .d.ts 声明文件
    "declaration": true,
    // ↓指定生成的 '.d.ts' 文件的保存文件夹
    "declarationDir": "./dist/types",
    // ↓tsc 编译后的产物输出目录
    "outDir": "dist",
    // ↓产物是否消除注释
    "removeComments": true,
    /* Source Map Options */
    // ↓是否生成辅助 debug 的 .js.map 源映射文件
    "sourceMap": true,
    // ↓指定TypeScript源代码的根目录路径,对于输出文件结构与源代码结构保持一致非常有用
    "sourceRoot": "./",
    // ↓指定是否将ts源代码嵌入到生成的 .js.map 源映射文件中
    "inlineSources": true,
    /* 其他选项 */
    // ↓用于指定是否启用实验性的装饰器特性
    "experimentalDecorators": true,
    // ↓为装饰器提供元数据的支持
    "emitDecoratorMetadata": true
  },
  "exclude": ["**/node_modules", "**/__tests__", "**/tests/**", "**/dist"]
}
